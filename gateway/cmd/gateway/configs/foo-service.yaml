openapi: 3.0.3
info:
  title: My API Gateway
  description: This is a sample service for the API gateway.
  version: 1.0.0
  termsOfService: "http://example.com/terms/"
  contact:
    name: API Support
    url: "http://example.com/support"
    email: support@example.com
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
servers:
  - url: "https://api.example.com/v1"
    description: Production server

paths:
  /foos:
    get:
      summary: List all foos
      operationId: listfoos
      tags:
        - foos
      responses:
        "200":
          description: A list of foos.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Foo"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a new Foo
      operationId: createFoo
      tags:
        - foos
      requestBody:
        description: The Foo to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Foo"
      responses:
        "201":
          description: Foo created
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /foos/{FooId}:
    parameters:
      - name: FooId
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Get a single Foo
      operationId: getFoo
      tags:
        - foos
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Foo"
        "404":
          description: Foo not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Update an existing Foo
      operationId: updateFoo
      tags:
        - foos
      requestBody:
        description: Foo data to update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Foo"
      responses:
        "200":
          description: Foo updated
        "400":
          description: Invalid input
        "404":
          description: Foo not found
    delete:
      summary: Delete a Foo
      operationId: deleteFoo
      tags:
        - foos
      responses:
        "204":
          description: Foo deleted
        "404":
          description: Foo not found

components:
  schemas:
    Foo:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier for a Foo
        name:
          type: string
          description: Name of the Foo
        description:
          type: string
          description: Detailed description of the Foo
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

security:
  - api_key: []

securitySchemes:
  api_key:
    type: apiKey
    name: "X-API-KEY"
    in: header

tags:
  - name: foos
    description: Operations related to foos
