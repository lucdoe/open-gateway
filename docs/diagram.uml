@startuml
namespace config {
    interface FileReader  {
        + ReadFile(name string) ([]byte, error)
    }
    interface Parser  {
        + Unmarshal(data []byte) (map[string]string, error)
    }
    interface Reader  {
        + ReadFile(name string) ([]byte, error)
    }
    interface YAMLParser  {
        + Unmarshal(YAMLData []byte) (map[string]string, error)
    }
    class concreteFileReader << (S,Aquamarine) >> {
        - reader FileReader
        + ReadFile(name string) ([]byte, error)
    }
    class concreteYAMLParser << (S,Aquamarine) >> {
        - parser YAMLParser
        + Unmarshal(data []byte) (map[string]string, error)
    }
}

"config.Reader" <|-- "config.concreteFileReader" : << implements >>
"config.Parser" <|-- "config.concreteYAMLParser" : << implements >>
"config.concreteFileReader" ..> "config.FileReader" : << depends on >>
"config.concreteYAMLParser" ..> "config.YAMLParser" : << depends on >>

namespace data {
    interface CacheClient  {
        + Set(key string, value interface{}, expiration time.Duration) error
        + Get(key string) (string, error)
    }
    interface RedisClient  {
        + Set(ctx context.Context, key string, value interface{}, expiration time.Duration) error
        + Get(ctx context.Context, key string) (string, error)
    }
    class concreteRedisClient << (S,Aquamarine) >> {
        - client RedisClient
        + Set(key string, value interface{}, expiration time.Duration) error
        + Get(key string) (string, error)
    }
}

"data.CacheClient" <|-- "data.concreteRedisClient" : << implements >>
"data.concreteRedisClient" ..> "data.RedisClient" : << depends on >>

namespace server {
    interface GinRouter  {
        + Use( ...HandlerFunc) Router
        + Any(method string, path string, handlers ...HandlerFunc) Router
        + GET(method string, path string, handlers ...HandlerFunc) Router
        + POST(method string, path string, handlers ...HandlerFunc) Router
        + DELETE(method string, path string, handlers ...HandlerFunc) Router
        + PATCH(method string, path string, handlers ...HandlerFunc) Router
        + PUT(method string, path string, handlers ...HandlerFunc) Router
        + OPTIONS(method string, path string, handlers ...HandlerFunc) Router
        + HEAD(method string, path string, handlers ...HandlerFunc) Router
        + Start(addr ...string) 

    }
    interface Router  {
        + Use( ...HandlerFunc) Router
        + Any(path string, handlers ...HandlerFunc) Router
        + GET(path string, handlers ...HandlerFunc) Router
        + POST(path string, handlers ...HandlerFunc) Router
        + DELETE(path string, handlers ...HandlerFunc) Router
        + PATCH(path string, handlers ...HandlerFunc) Router
        + PUT(path string, handlers ...HandlerFunc) Router
        + OPTIONS(path string, handlers ...HandlerFunc) Router
        + HEAD(path string, handlers ...HandlerFunc) Router
        + Start(addr ...string) 

    }
    class concreteGinRouter << (S,Aquamarine) >> {
        - router GinRouter

        + Use(handlers ...HandlerFunc) Router
        + Any(path string, handlers ...HandlerFunc) Router
        + GET(path string, handlers ...HandlerFunc) Router
        + POST(path string, handlers ...HandlerFunc) Router
        + DELETE(path string, handlers ...HandlerFunc) Router
        + PATCH(path string, handlers ...HandlerFunc) Router
        + PUT(path string, handlers ...HandlerFunc) Router
        + OPTIONS(path string, handlers ...HandlerFunc) Router
        + HEAD(path string, handlers ...HandlerFunc) Router
        + Start(addr ...string) 

    }
}

"server.Router" <|-- "server.concreteGinRouter" : << implements >>
"server.concreteGinRouter" ..> "server.GinRouter" : << depends on >>
@enduml